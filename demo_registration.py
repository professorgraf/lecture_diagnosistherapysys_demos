
import tkinter as tk
from tkinter import ttk, messagebox
from controls import gridviewcanvas
import time
from PIL import Image, ImageTk
from io import BytesIO
import numpy as np


class UIRegistrationDemo:
    def __init__(self):
        self.window = tk.Tk()
        self.running = True
        self.window.title("Registration Demo")
        self.window.geometry("1200x890")
        self.window.configure(bg="black")
        self.window.protocol("WM_DELETE_WINDOW", self.on_quit)

        self.tab_control = None
        self.canvas_template = None
        self.canvas_reference = None

        self.synchronize = tk.BooleanVar()
        self.synchronize.set(False)

        self.create_controls()

    def create_controls(self):
        self.tab_control = tk.ttk.Notebook(self.window, padding=(5, 5, 5, 5))
        tab_params = tk.ttk.Frame(self.tab_control, padding=(10, 10, 10, 10))
        tab_results = tk.ttk.Frame(self.tab_control, padding=(10, 10, 10, 10))

        self.tab_control.add(tab_params, text="Template and Reference")
        self.tab_control.add(tab_results, text="Results")

        self.tab_control.grid(column=0, row=0, sticky='NSWE')
        self.window.grid_columnconfigure(0, weight=1)
        self.window.grid_rowconfigure(0, weight=1)
        tab_params.grid_columnconfigure(0, weight=1)
        # tab_params.grid_rowconfigure(1, weight=1)
        # self.bytes_stream = base64_decoded_stream(image_logo)

        dx = 500
        dy = 400

        tk.Label(tab_params, text='Template image').grid(column=0, columnspan=1, row=0, sticky='NW')
        tk.Label(tab_params, text='Reference image').grid(column=2, columnspan=2, row=0, sticky='NW')
        self.canvas_template = gridviewcanvas.GridViewCanvas(tab_params)
        self.canvas_template.configure(width=dx, height=dy)
        self.canvas_reference = gridviewcanvas.GridViewCanvas(tab_params)
        self.canvas_reference.configure(width=dx, height=dy)
        self.canvas_template.grid(column=0, columnspan=2, row=1, sticky='NW')
        self.canvas_reference.grid(column=2, columnspan=2, row=1, sticky='NE')

        ttk.Button(tab_params, text='Clear all', command=self.clear_all).grid(column=0, row=2, sticky='NE')
        ttk.Button(tab_params, text='Copy points from Template to Reference', command=self.copy_points).grid(column=1, row=2, sticky='NE')
        tk.Button(tab_params, text='Calculate Translation', command=self.on_calculate_translation).grid(column=0, row=3, sticky='NWE')

    def clear_all(self):
        if tk.messagebox.askyesno(message='Really clear all points?'):
            self.canvas_template.clear_all_markers()
            self.canvas_reference.clear_all_markers()

    def copy_points(self):
        if tk.messagebox.askyesno(message='This will overwrite points in reference image. Do you still want to do it?'):
            self.canvas_reference.clear_all_markers()
            for marker in self.canvas_template.get_marker_list():
                self.canvas_reference.add_marker_at(marker.position[0], marker.position[1])

    def create_paired_pointlist(self):
        list1 = self.canvas_template.get_marker_list()
        len1 = len(list1)
        list2 = self.canvas_reference.get_marker_list()
        len2 = len(list2)
        minlen = min(len1, len2)
        if len1 != len2:
            tk.messagebox.showinfo(message="Number of points differ, just using the first {} points".format(minlen))
        arr = np.zeros((minlen, 2, 2))  # number of points, 2 = a pair, 2 = number of coords
        for i in range(0, minlen):
            arr[i, 0, :] = np.array(list1[i].position)
            arr[i, 1, :] = np.array(list2[i].position)

        # arr[:, 0, :] << this is the points from the template image
        # arr[:, 1, :] << this is all the points from the reference image
        # arr[0, :, :] << first point pair
        return arr

    def on_calculate_translation(self):
        pointpairs = self.create_paired_pointlist()
        trans = pointpairs[:, 1, :] - pointpairs[:, 0, :]
        print(trans)
        print(trans.shape)
        for i in range(trans.shape[0]):
            self.canvas_template.set_translation(i, trans[i])

    def on_quit(self):
        self.running = False
        self.window.quit()

    def mainloop(self):
        while self.running:
            self.window.update_idletasks()
            self.window.update()
            # react on when training thread is finished
            # if not self.queue.empty() and self.queue.get_nowait() == 1:
            #    self.update_results()
            time.sleep(0.1)


def decode_image(image_data):
    import base64
    import io
    # Decode base64 encoded image data
    decoded_data = base64.b64decode(image_data)
    # Create a BytesIO object to read the decoded image data
    image_stream = io.BytesIO(decoded_data)
    # Open the image using PIL (Python Imaging Library)
    image = Image.open(image_stream)
    # Convert PIL Image to PhotoImage
    photo_image = ImageTk.PhotoImage(image)
    return photo_image


def base64_decoded_stream(image_data):
    import base64
    import io
    # Decode base64 encoded image data
    decoded_data = base64.b64decode(image_data)
    # Create a BytesIO object to read the decoded image data
    image_stream = io.BytesIO(decoded_data)
    return image_stream


image_logo = """

"""


if __name__ == '__main__':
    window = UIRegistrationDemo()
    window.mainloop()

